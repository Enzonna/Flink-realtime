package com.enzo.gmall.realtime.common.util;

import com.alibaba.fastjson.JSONObject;
import com.enzo.gmall.realtime.common.constant.Constant;
import com.google.common.base.CaseFormat;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.Cell;
import org.apache.hadoop.hbase.CellUtil;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.*;
import org.apache.hadoop.hbase.util.Bytes;

import java.io.IOException;
import java.util.List;
import java.util.Set;

public class HBaseUtil {
    // Ëé∑ÂèñËøûÊé•ÂØπË±°
    public static Connection getHBaseConnection() {
        try {
            Configuration conf = new Configuration();
            conf.set("hbase.zookeeper.quorum", "hadoop102,hadoop103,hadoop104");
            conf.set("hbase.zookeeper.property.clientPort", "2181");
            Connection connection = ConnectionFactory.createConnection(conf);
            return connection;
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    // ÂÖ≥Èó≠ËøûÊé•ÂØπË±°
    public static void closeHBaseConnection(Connection connection) {
        if (connection != null) {
            try {
                connection.close();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }


    // üçµüçµüçµËé∑ÂèñÂºÇÊ≠•Êìç‰ΩúËøûÊé•ÂØπË±°
    public static AsyncConnection getHBaseAsyncConnection() {
        try {
            Configuration conf = new Configuration();
            conf.set("hbase.zookeeper.quorum", "hadoop102,hadoop103,hadoop104");
            AsyncConnection asyncConnection = ConnectionFactory.createAsyncConnection(conf).get();
            return asyncConnection;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    // üçµüçµüçµÂÖ≥Èó≠ÂºÇÊ≠•Êìç‰ΩúËøûÊé•ÂØπË±°
    public static void closeHBaseAsyncConnection(AsyncConnection asyncRedisConn) {
        if (asyncRedisConn != null && !asyncRedisConn.isClosed()) {
            try {
                asyncRedisConn.close();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }


    // üçµüçµüçµ‰ª•ÂºÇÊ≠•ÁöÑÊñπÂºèÊ†πÊçÆrowkeyÂà∞HbaseË°®‰∏≠Êü•ËØ¢Êï∞ÊçÆ
    public static JSONObject readDimAsync(AsyncConnection asyncRedisConn, String nameSpace, String tableName, String rowKey) {
        try {
            TableName tableNameObj = TableName.valueOf(nameSpace, tableName);
            AsyncTable<AdvancedScanResultConsumer> asyncTable = asyncRedisConn.getTable(tableNameObj);
            Get get = new Get(Bytes.toBytes(rowKey));
            Result result = asyncTable.get(get).get();
            List<Cell> cells = result.listCells();
            if (cells != null && cells.size() > 0) {
                JSONObject dimJsonObj = new JSONObject();
                for (Cell cell : cells) {
                    String columnName = Bytes.toString(CellUtil.cloneQualifier(cell));
                    String columnValue = Bytes.toString(CellUtil.cloneValue(cell));
                    dimJsonObj.put(columnName, columnValue);
                }
                return dimJsonObj;
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return null;
    }


    // Âª∫Ë°®
    public static void createHBaseTable(Connection hbaseConn, String nameSpace, String tableName, String... families) {
        if (families.length < 1) {
            System.out.println("ËØ∑ËæìÂÖ•Ëá≥Â∞ë‰∏Ä‰∏™ÂàóÁ∞á");
            return;
        }

        // Ëá™Âä®ËµÑÊ∫êÂõûÊî∂
        try (Admin admin = hbaseConn.getAdmin()) {
            // Âà§Êñ≠Ë°®ÊòØÂê¶Â≠òÂú®
            TableName tableNameObj = TableName.valueOf(nameSpace, tableName);
            if (admin.tableExists(tableNameObj)) {
                System.out.println(nameSpace + "‰∏ãÁöÑ" + tableName + "Ë°®Â∑≤Â≠òÂú®");
                return;
            }
            // ÂàõÂª∫Ë°®ÊèèËø∞Âô®
            TableDescriptorBuilder tableDescriptorBuilder = TableDescriptorBuilder.newBuilder(tableNameObj);
            for (String family : families) {
                // ÂêëË°®ÊèèËø∞Âô®‰∏≠Ê∑ªÂä†ÂàóÁ∞á
                tableDescriptorBuilder.setColumnFamily(ColumnFamilyDescriptorBuilder.newBuilder(Bytes.toBytes(family)).build());
            }

            admin.createTable(tableDescriptorBuilder.build());
            System.out.println(nameSpace + "‰∏ãÁöÑ" + tableName + "ÂàõÂª∫ÊàêÂäü‚úÖ‚úÖ");

        } catch (IOException e) {
            throw new RuntimeException(e);
        }


    }


    // Âà†Ë°®
    public static void dropHBaseTable(Connection hbaseConn, String nameSpace, String tableName) {
        try (Admin admin = hbaseConn.getAdmin()) {
            TableName tableNameObj = TableName.valueOf(nameSpace, tableName);
            if (!admin.tableExists(tableNameObj)) {
                System.out.println(nameSpace + "‰∏ãÁöÑ" + tableName + "Ë°®‰∏çÂ≠òÂú®‚ùå‚ùå");
                return;
            }
            admin.disableTable(tableNameObj);
            admin.deleteTable(tableNameObj);
            System.out.println(nameSpace + "‰∏ãÁöÑ" + tableName + "Ë°®ÊàêÂäü‚úÖ‚úÖ");
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }


    /**
     * put to HBase
     */
    public static void putRow(Connection hbaseConn, String nameSpace, String tableName, String rowKey, String family, JSONObject jsonObj) {
        TableName tableNameObj = TableName.valueOf(nameSpace, tableName);
        try (Table table = hbaseConn.getTable(tableNameObj)) {
            // putÂØπË±°ÔºöÂ∞ÅË£ÖrowKey„ÄÅÂàóÁ∞á„ÄÅÂàóÂêç„ÄÅÂàóÂÄº
            Put put = new Put(Bytes.toBytes(rowKey));
            Set<String> columnNames = jsonObj.keySet();
            for (String columnName : columnNames) {
                String columnValue = jsonObj.getString(columnName);
                if (columnValue != null) {
                    put.addColumn(Bytes.toBytes(family), Bytes.toBytes(columnName), Bytes.toBytes(columnValue));
                }
            }
            table.put(put);
            System.out.println(nameSpace + "‰∏ãÁöÑ" + tableName + "Ë°®‰∏≠putÊï∞ÊçÆ" + rowKey + "ÊàêÂäü‚úÖ‚úÖ");
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

    }


    // delete from HBase
    public static void deleteRow(Connection hbaseConn, String nameSpace, String tableName, String rowKey) {
        TableName tableNameObj = TableName.valueOf(nameSpace, tableName);
        try (Table table = hbaseConn.getTable(tableNameObj)) {
            Delete delete = new Delete(Bytes.toBytes(rowKey));
            table.delete(delete);
            System.out.println(nameSpace + "‰∏ãÁöÑ" + tableName + "Ë°®‰∏≠deleteÊï∞ÊçÆ" + rowKey + "ÊàêÂäü‚úÖ‚úÖ");
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }


    // Ê†πÊçÆrowÔºåkeyÂà∞HBaseË°®‰∏≠Êü•ËØ¢‰∏ÄÊù°Êï∞ÊçÆÂá∫Êù•
    public static <T> T getRow(Connection hbaseConn, String nameSpace, String tableName, String rowKey, Class<T> clazz, boolean isUnderTo) {

        TableName tableNameObj = TableName.valueOf(nameSpace, tableName);
        try (Table table = hbaseConn.getTable(tableNameObj)) {
            // Êü•ËØ¢
            Result result = table.get(new Get(Bytes.toBytes(rowKey)));
            List<Cell> cells = result.listCells();
            if (cells != null && cells.size() > 0) {
                T obj = clazz.newInstance();
                for (Cell cell : cells) {
                    String columnName = Bytes.toString(CellUtil.cloneQualifier(cell));
                    String columnValue = Bytes.toString(CellUtil.cloneValue(cell));
                    if (isUnderTo) {
                        columnName = CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, columnName);
                    }
                    BeanUtils.setProperty(obj, columnName, columnValue);
                }
                return obj;
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return null;
    }


    public static void main(String[] args) {
        Connection hBaseConnection = getHBaseConnection();
        JSONObject dim_base_trademark
                = getRow(hBaseConnection, Constant.HBASE_NAMESPACE, "dim_base_trademark", "1", JSONObject.class, false);
        System.out.println(dim_base_trademark);
        closeHBaseConnection(hBaseConnection);
    }
}
